# app.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import plotly.subplots as sp

from features import build_feature_matrix, build_all_synthetic_crosses
from models.statistical import (
    compute_manual_thresholds,
    get_manual_threshold_cross,
    rolling_quantile_thresholds,
    garch_evt_threshold
)
from models.ml import run_isolation_forest, run_one_class_svm, run_autoencoder
from models.ensemble import compute_consensus
from models.backtest import simulate_trades, apply_trade_flags, aggregate_backtest_metrics

# ─── Page Config ──────────────────────────────────────────────────────────────
st.set_page_config(page_title="FX Vol PoC — Overview & Dashboard", layout="wide")

# ─── Sidebar: Upload & Settings ────────────────────────────────────────────────
st.sidebar.header("1) Upload Data")
uploaded = st.sidebar.file_uploader(
    "Consolidated FX CSV (Date,Open,High,Low,Close,OHLCVolatility,Currency)",
    type="csv"
)
if not uploaded:
    st.sidebar.warning("Awaiting FX data upload…")
    st.stop()

# Load and preprocess
df_all = pd.read_csv(uploaded, parse_dates=['Date'])
df_all = build_feature_matrix(df_all)

# Compute manual‐group thresholds
mean_vol_df, group_thr_df = compute_manual_thresholds(
    df_all, currency_col='Currency', vol_col='OHLCVolatility'
)

# Build all USD-X crosses
df_cross_all = build_all_synthetic_crosses(df_all)
crosses = sorted(df_cross_all['CrossPair'].unique())

sel_cross = st.sidebar.selectbox("2) Select Cross Pair", crosses)

st.sidebar.header("3) Model & Simulation Settings")
n_trades = st.sidebar.slider("Trades per Day", 10,200,50)
rq_w      = st.sidebar.slider("Rolling Window (days)", 30,120,60)
rq_l, rq_h= st.sidebar.slider("Rolling Quantiles (low, high)", 0.01,0.10,(0.05,0.95))
evt_p     = st.sidebar.slider("EVT Tail Percentile", 0.990,0.999,0.995,0.001)
cont_if   = st.sidebar.slider("IF Contamination", 0.01,0.10,0.05,0.005)
nu_svm    = st.sidebar.slider("SVM ν", 0.01,0.10,0.05,0.005)
ae_tail   = st.sidebar.slider("AE Tail Percentile",0.90,0.99,0.95,0.01)
cons_t    = st.sidebar.slider("Consensus Threshold (fraction)",0.1,1.0,0.5,0.05)

# ─── Prepare Data for the Selected Cross ────────────────────────────────────────
# Manual threshold for this cross
base, quote = sel_cross[:3], sel_cross[3:]
manual_thr   = get_manual_threshold_cross(mean_vol_df, group_thr_df, base, quote)

# Synthetic cross DataFrame
df_cross = df_cross_all.query("CrossPair == @sel_cross").reset_index(drop=True)

# Statistical thresholds
df_stat = rolling_quantile_thresholds(
    df_cross[['Date','Volatility']],
    window=rq_w, low_q=rq_l, high_q=rq_h
)
evt_thr = garch_evt_threshold(df_cross, tail_pct=evt_p)

# ML anomaly flags
X      = df_cross[['Volatility','LogReturn']].values
df_ml  = df_cross[['Date','Volatility']].copy()
df_ml['IF_Anomaly']  = run_isolation_forest(X, contamination=cont_if)
df_ml['SVM_Anomaly'] = run_one_class_svm(X, nu=nu_svm)
ae_mse               = run_autoencoder(X)
ae_thr               = np.quantile(ae_mse, ae_tail)
df_ml['AE_Anomaly']  = (ae_mse > ae_thr).astype(int)

# Consensus per day
df_cons = pd.DataFrame({
    'Date':    df_stat['Date'],
    'Rolling': (df_stat['Volatility'] > df_stat['Threshold_High']).astype(int),
    'IF':      df_ml['IF_Anomaly'],
    'SVM':     df_ml['SVM_Anomaly'],
    'AE':      df_ml['AE_Anomaly']
})
df_cons['Consensus_Flag'] = compute_consensus(
    df_cons[['Rolling','IF','SVM','AE']], threshold=cons_t
)[1]  # the second element is the breach binary

# Backtest: simulate & flag
trades  = simulate_trades(df_cross, n_trades_per_day=n_trades)
flagged = apply_trade_flags(
    trades, df_stat, df_ml, evt_thr, manual_threshold=manual_thr
)
# **Add** consensus flag into the flagged trades
flagged['Consensus_Flag'] = flagged['Date'].map(
    df_cons.set_index('Date')['Consensus_Flag']
).astype(int)

# Aggregate metrics (will now include Consensus_Flag)
metrics = aggregate_backtest_metrics(flagged)

# ─── Tabs: Overview & Dashboard ────────────────────────────────────────────────
tab_overview, tab_dash = st.tabs(["📋 Overview", "📊 Dashboard"])

with tab_overview:
    st.header("FX Volatility Threshold Monitoring PoC")
    st.markdown("""
    **End-to-End Workflow:**
    1. **Manual Grouping** — static bands from business-defined mean daily vol.  
    2. **Synthetic Crosses** — build USD-X pairs automatically.  
    3. **Statistical Thresholds** — rolling quantiles & GARCH-EVT tail-risk.  
    4. **ML Anomaly Models** — Isolation Forest, SVM, Autoencoder.  
    5. **Consensus Voting** — combine all signals via thresholded majority.  
    6. **Backtesting** — simulate deal deviations, compare Manual vs. Dynamic vs. Consensus.
    """)

with tab_dash:
    st.header(f"Dashboard — Cross: {sel_cross}")

    # ─── Manual Groups Overview ────────────────────────────────────────────────
    fig_grp = px.bar(
        mean_vol_df,
        x='Currency', y='MeanDailyVol',
        color='Group',
        title='Mean Daily Volatility by Currency & Manual Group',
        labels={'MeanDailyVol':'Mean Daily Vol'}
    )
    fig_grp.update_layout(height=300)
    st.plotly_chart(fig_grp, use_container_width=True)

    # Show the cross’s manual group
    grp1 = mean_vol_df.loc[mean_vol_df['Currency']==base,'Group'].iloc[0]
    grp2 = mean_vol_df.loc[mean_vol_df['Currency']==quote,'Group'].iloc[0]
    order = ['Low','Medium','High','Very High']
    cross_group = grp1 if order.index(grp1)>order.index(grp2) else grp2
    st.markdown(f"**Selected Cross Manual Group:** 🔖 **{cross_group}**")

    # Manual thresholds per group, highlight current
    fig_thr = px.bar(
        group_thr_df,
        x='Group', y='ThresholdDailyVol',
        title='Static Manual Daily-Vol Threshold by Group',
        labels={'ThresholdDailyVol':'Daily Vol Threshold'}
    )
    colors = ['crimson' if g==cross_group else 'lightgray'
              for g in group_thr_df['Group']]
    fig_thr.update_traces(marker_color=colors)
    fig_thr.update_layout(height=250, showlegend=False)
    st.plotly_chart(fig_thr, use_container_width=True)

    st.markdown("---")

    # ─── KPI Cards & Explanations ────────────────────────────────────────────
    today_roll   = df_stat['Threshold_High'].iloc[-1]
    today_evt    = evt_thr
    today_manual = manual_thr

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Manual Group Thr",         f"{today_manual:.4f}")
    c2.metric("Rolling 95%ile Thr",       f"{today_roll:.4f}")
    c3.metric("EVT Tail-Risk Thr",        f"{today_evt:.4f}")
    c4.metric("Consensus Vote Thr",       f"{cons_t:.2f}")

    st.markdown("""
    **Why these?**  
    - **Manual Group Thr:** static cap = max(mean daily vol) in your bucket.  
    - **Rolling 95%ile Thr:** adapts to regime shifts via latest 95th percentile.  
    - **EVT Tail-Risk Thr:** flags true outliers using a GARCH+GPD tail fit.  
    - **Consensus Vote Thr:** reduces bias by requiring majority of models.
    """)

    st.markdown("---")

    # ─── Volatility & Threshold Comparison ──────────────────────────────────
    st.markdown("#### Volatility & Selected Thresholds")
    thr_opts = ["Manual Group","Rolling 95%ile","EVT"]
    sel_thr  = st.multiselect("Overlay thresholds", thr_opts, default=thr_opts)

    # Build DataFrame of chosen thresholds
    thr_df = pd.DataFrame({'Date': df_stat['Date']})
    if "Rolling 95%ile" in sel_thr:
        thr_df["Rolling 95%ile"] = df_stat['Threshold_High']
    if "EVT" in sel_thr:
        thr_df["EVT"] = [today_evt]*len(thr_df)
    if "Manual Group" in sel_thr:
        thr_df["Manual Group"] = [today_manual]*len(thr_df)

    fig2 = go.Figure()
    # plot volatility
    fig2.add_trace(go.Scatter(
        x=df_cross['Date'], y=df_cross['Volatility'],
        name='Volatility', line=dict(color='blue')
    ))
    style_map = {
        "Manual Group": dict(color='black', dash='longdash'),
        "Rolling 95%ile": dict(color='orange', dash='dash'),
        "EVT": dict(color='green', dash='dot')
    }
    for thr in sel_thr:
        fig2.add_trace(go.Scatter(
            x=thr_df['Date'], y=thr_df[thr],
            name=thr, line=style_map[thr]
        ))
    fig2.update_layout(
        xaxis=dict(rangeslider=dict(visible=True)),
        yaxis_title="Volatility / Threshold",
        height=450
    )
    st.plotly_chart(fig2, use_container_width=True)

    st.markdown("---")

    # ─── Daily Flag Rates ────────────────────────────────────────────────────
    st.markdown("#### Daily Flag Rates")
    # metrics has columns like 'Rolling_Flag_Rate', ... 'Consensus_Flag_Rate'
    rates = metrics.copy().rename(columns=lambda c: c.replace('_Rate',''))
    options = rates.columns.tolist()
    default = [m for m in ["Manual_Flag","Consensus_Flag"] if m in options]
    sel_models = st.multiselect("Select models", options, default=default)

    fig3 = go.Figure()
    for m in sel_models:
        fig3.add_trace(go.Scatter(
            x=rates.index, y=rates[m], name=m, mode='lines+markers'
        ))
    fig3.update_layout(
        yaxis_title="Flag Rate",
        xaxis=dict(rangeslider=dict(visible=True)),
        height=350
    )
    st.plotly_chart(fig3, use_container_width=True)

    st.markdown("---")

    # ─── Sample Flagged Trades ───────────────────────────────────────────────
    st.markdown("#### Sample Flagged Trades (Consensus_Flag == 1)")
    sample = flagged.query("Consensus_Flag == 1") \
                    .sample(min(10, len(flagged)), random_state=1)
    st.dataframe(sample[[
        'Date','Deviation',
        'Manual_Flag','Rolling_Flag','EVT_Flag',
        'IF_Flag','SVM_Flag','AE_Flag','Consensus_Flag'
    ]], use_container_width=True)
