import pandas as pd
import numpy as np

def validate_annualization(df: pd.DataFrame, vol_col: str = 'Volatility') -> pd.DataFrame:
    """
    Ensure Volatility is annualized; if not, scale by sqrt(252).
    """
    df = df.copy()
    if df[vol_col].max() < 0.5:
        df[vol_col] *= np.sqrt(252)
    return df

def compute_log_returns(df: pd.DataFrame, price_col: str = 'Close') -> pd.DataFrame:
    """
    Compute daily log returns.
    """
    df = df.copy()
    df['LogReturn'] = np.log(df[price_col] / df[price_col].shift(1))
    return df.dropna()

def build_synthetic_cross(
    df_base: pd.DataFrame,
    df_quote: pd.DataFrame,
    cross_name: str = 'CROSS'
) -> pd.DataFrame:
    """
    Build synthetic cross (e.g. INRJPY) from two DataFrames (INRUSD, USDJPY).
    Assumes each has ['Date','Close','Volatility'] and a 'Currency' column.
    Returns DataFrame with ['Date','Close_CROSS','Volatility_CROSS','LogReturn_CROSS'].
    """
    # Merge on Date
    df = df_base.merge(
        df_quote,
        on='Date',
        suffixes=('_BASE','_QUOTE')
    ).sort_values('Date').reset_index(drop=True)

    # Synthetic rate: multiply closes
    df[f'Close_{cross_name}']     = df['Close_BASE'] * df['Close_QUOTE']
    # Synthetic volatility: sqrt(v1^2 + v2^2)
    df[f'Volatility_{cross_name}'] = np.sqrt(
        df['Volatility_BASE']**2 + df['Volatility_QUOTE']**2
    )
    # Log returns for synthetic
    df[f'LogReturn_{cross_name}'] = np.log(
        df[f'Close_{cross_name}'] / df[f'Close_{cross_name}'].shift(1)
    )
    return df[['Date',
               f'Close_{cross_name}',
               f'Volatility_{cross_name}',
               f'LogReturn_{cross_name}']].dropna()

def build_feature_matrix(df: pd.DataFrame, vol_col: str = 'Volatility') -> pd.DataFrame:
    """
    Full pipeline for single‚Äêcurrency data:
      1) validate annualization
      2) compute log returns
    """
    df = df.copy()
    df = validate_annualization(df, vol_col=vol_col)
    df = compute_log_returns(df, price_col='Close')
    return df.reset_index(drop=True)
